import xml.etree.ElementTree as ET
from API_Driven_Migration.QualysCommon import QualysAPI


def responseHandler(response: ET.Element):
    if response.find('.//CODE') is None:
        return True
    else:
        print('ERROR %s: %s' % (response.find('.//CODE').text, response.find('.//TEXT').text))
        return False


def getAssetGroups(source_api: QualysAPI.QualysAPI):
    fullurl = '%s/api/2.0/fo/asset/group/?action=list&show_attributes=ALL' % source_api.server
    resp = source_api.makeCall(url=fullurl)

    if not responseHandler(resp):
        return None

    usesnetworks = False
    aglist = resp.find('.//ASSET_GROUP_LIST')
    return aglist


def convertAssetGroup(ag: ET.Element, netmap: dict = None, appliancemap: dict = None):
    # Takes an Asset Group XML generated by getAssetGroups(), updates the Network, Appliance and Domain information
    # from the corresponding maps and returns the URL and payload required to recreate the Asset Groups
    # Will return 'None' if the Asset Group title is 'All' as this is a special Asset Group which cannot be created

    url = '/api/2.0/fo/asset/group/'
    payload = {'action': 'add'}

    if ag.find('TITLE').text == 'All':
        return None, None
    payload['title'] = ag.find('TITLE').text

    if ag.find('CVSS_ENVIRO_CDP').text != "Not Defined":
        payload['cvss_enviro_cdp'] = ag.find('CVSS_ENVIRO_CDP').text.lower()

    if ag.find('CVSS_ENVIRO_TD').text != "Not Defined":
        payload['cvss_enviro_td'] = ag.find('CVSS_ENVIRO_TD').text.lower()

    if ag.find('CVSS_ENVIRO_CR').text != "Not Defined":
        payload['cvss_enviro_cr'] = ag.find('CVSS_ENVIRO_CR').text.lower()

    if ag.find('CVSS_ENVIRO_IR').text != "Not Defined":
        payload['cvss_enviro_ir'] = ag.find('CVSS_ENVIRO_IR').text.lower()

    if ag.find('CVSS_ENVIRO_AR').text != "Not Defined":
        payload['cvss_enviro_ar'] = ag.find('CVSS_ENVIRO_AR').text.lower()

    if ag.find('COMMENTS') is not None:
        payload['comments'] = ag.find('COMMENTS').text

    if ag.find('IP_SET') is not None:
        ipset = ag.find('IP_SET')
        ips = []
        for iprange in ipset.findall('*'):
            ips.append(iprange.text)
        payload['ips'] = ','.join(ips)

    if ag.find('DOMAIN_LIST') is not None:
        dlist = ag.find('DOMAIN_LIST')
        domains = []
        for domain in dlist.findall('DOMAIN'):
            domains.append('%s:[%s]' % (domain.text, domain.get('netblock')))
        payload['domains'] = ','.join(domains)

    if ag.find('DNS_LIST') is not None:
        dnslist = ag.find('DNS_LIST')
        dnsnames = []
        for dnsname in dnslist.findall('DNS'):
            dnsnames.append('%s' % dnsname.text)
        payload['dns_names'] = ','.join(dnsnames)

    if ag.find('NETBIOS_LIST') is not None:
        netbioslist = ag.find('NETBIOS_LIST')
        netbiosnames = []
        for netbiosname in netbioslist.findall('NETBIOS'):
            netbiosnames.append('%s' % netbiosname.text)
        payload['netbios_names'] = ','.join(netbiosnames)

    if ag.find('NETWORK_ID') is not None:
        if not ag.find('NETWORK_ID').text == '0':
            if netmap is None:
                print('FATAL: Asset Group %s is assigned to a non-zero Network object but network map is not '
                      'provided or is empty' % ag.find('TITLE').text)
                return None, None
            newnetid = netmap[ag.find('NETWORK_ID').text]
            payload['network_id'] = newnetid

    if ag.find('DEFAULT_APPLIANCE_ID') is not None:
        if appliancemap is None:
            print('FATAL: Asset Group %s has scanner appliances assigned but no appliance map is provided' %
                  ag.find('TITLE').text)
            return None
        newapp = appliancemap[ag.find('DEFAULT_APPLIANCE_ID').text]
        payload['default_appliance_id'] = newapp

    if ag.find('APPLIANCE_IDS') is not None:
        if appliancemap is None:
            print('FATAL: Asset Group %s has scanner appliances assigned but no appliance map is provided' %
                  ag.find('TITLE').text)
            return None
        appliance_ids = ag.find('APPLIANCE_IDS').text.split(', ')
        newappids = []
        for appid in appliance_ids:
            newappids.append(appliancemap[appid])
        payload['appliance_ids'] = ','.join(newappids)
        # payload['appliance_ids'] = ag.find('APPLIANCE_IDS').text.replace(', ', ',')

    return url, payload


def buildSimpleAssetGroup(name: str, ips: list):
    url = '/api/2.0/fo/asset/group/'
    payload = {
        'action': 'add',
        'title': name,
        'ips': ','.join(ips)
    }
    return url, payload


def createAssetGroup(target_api: QualysAPI.QualysAPI, url: str, payload: dict):
    fullurl = '%s%s' % (target_api.server, url)
    resp = target_api.makeCall(url=fullurl, payload=payload)
    return resp


def build_asset_group_map(source_api: QualysAPI.QualysAPI, target_api: QualysAPI.QualysAPI, prefix: str = None):
    baseurl = '/api/2.0/fo/asset/group/?action=list&show_attributes=ID,TITLE'
    source_url = '%s%s' % (source_api.server, baseurl)
    target_url = '%s%s' % (target_api.server, baseurl)

    source_ags = source_api.makeCall(url=source_url)
    target_ags = target_api.makeCall(url=target_url)

    source_ag_dict = {}
    target_ag_dict = {}
    ag_map = {}

    for i in source_ags.findall('.//ASSET_GROUP'):
        source_ag_dict[i.find('TITLE').text] = i.find('ID').text

    for i in target_ags.findall('.//ASSET_GROUP'):
        target_ag_dict[i.find('TITLE').text] = i.find('ID').text

    for i in source_ag_dict.keys():
        if prefix is not None:
            target_ag_name = '%s %s' % (prefix, i)
            if target_ag_name in target_ag_dict.keys():
                ag_map[source_ag_dict[i]] = target_ag_dict[target_ag_name]
        else:
            if i in target_ag_dict.keys():
                ag_map[source_ag_dict[i]] = target_ag_dict[i]

    return ag_map
